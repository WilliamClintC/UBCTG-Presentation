# Fondamentaux "<i class="fab fa-r-project"></i> base"<br>Les Fonctions

##  Les Fonctions

Une fonction se décompose en trois éléments&nbsp;:

- Les arguments (`arguments`).

- Le corps (`body`).

- L'environnement (`environment`).

## Les Fonctions

```{r}
f <- function(x, y) {
  # Commentaire
  return(x + y)
}
```

```{r}
f <- function(x, y) {
  # Commentaire
  x + y
}
```

## Les Fonctions

```{r}
formals(f)
body(f)
environment(f)
```

## Les Fonctions

Les fonctions sont des objets au même titre que les vecteurs.

```{r}
attributes(f)
```

## Les Fonctions

- Fonction "classique", affectée d'un nom.

```{r}
f <- function(x, y) {
  # Commentaire
  x + y
}
f(1, 2)
```

- Fonction anonyme.

```{r}
(function(x, y) x + y)(1, 2)
```

## Les Fonctions Composées

```{r}
square <- function(x) x^2
deviation <- function(x) x - mean(x)
x <- runif(100)
```

## Les Fonctions Composées: Imbrication

```{r}
sqrt(mean(square(deviation(x))))
```

## Les Fonctions Composées: Séquentiel

```{r}
out <- deviation(x)
out <- square(out)
out <- mean(out)
out <- sqrt(out)
out
```

## Les Fonctions Composées: "Pipe" `%>%` (`magrittr`)

```{r}
library(magrittr)
x %>%
  deviation() %>%
  square() %>%
  mean() %>%
  sqrt()
```

## Exercices

1. `match.fun()` permet de trouver une fonction avec son nom. À partir d'une fonction, est-il possible de trouver son nom&nbsp;?

2. Quelles fonctions permettraient d'identifier si un objet est une fonction et s'il s'agit d'une primitive&nbsp;? Par exemple, `+`, `sum`, `lm` et `t.test`.

3. Quelles sont les composantes d'une fonction&nbsp;? `str`, `attributes`, `typeof`, `class`, etc.

4. Est-il possible de donner des attributs (*c.-à-d.*, avec `attr`) à une fonction&nbsp;?
