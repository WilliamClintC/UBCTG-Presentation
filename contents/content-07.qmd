# Fondamentaux "{{< iconify fa6-brands r-project >}} base"<br>Les `data.frame`

## `data.frame`

L'une des classes S3 importante dans {{< iconify fa6-brands r-project >}} est la classe `data.frame` (`tibble` dans le "tidyverse"), qui repose entièrement sur les listes.

Qu'est-ce qu'un `data.frame`&nbsp;?

```{r}
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)
```

Un `data.frame` est une liste nommée, de vecteur de même dimension (longueur) avec des attributs `names` (noms des colonnes) et `row.names`.

## `data.frame`

L'une des classes S3 importante dans {{< iconify fa6-brands r-project >}} est la classe `data.frame` (`tibble` dans le "tidyverse"), qui repose entièrement sur les listes.

Qu'est-ce qu'un `data.frame`&nbsp;?

```{r}
attributes(df1)
```

Un `data.frame` est une liste nommée, de vecteur de même longueur avec des attributs `names` (noms des colonnes) et `row.names`.

## `data.frame`

Un `data.frame` a donc une structure rectangulaire et dispose de noms pour les lignes et les colonnes.

- `rownames()` pour obtenir le noms des lignes.

- `colnames()` (ou `names()`) pour obtenir le noms des colonnes.

- `nrow()` pour obtenir le nombre de lignes.

- `ncol()` (ou `length()`) pour obtenir le nombre de colonnes.

## `data.frame`

La création d'un `data.frame` se fait via `data.frame()`.

```{r}
df <- data.frame(
  x = 1:3,
  y = c("a", "b", "c")
)
str(df)
```

## `data.frame`

La création d'un `data.frame` se fait via `data.frame()`.

```{r}
df <- data.frame(
  x = 1:3,
  y = c("a", "b", "c"),
  stringsAsFactors = TRUE # Par défaut dans R < 4.0
)
str(df)
```

## `data.frame`

La création d'un `data.frame` se fait via `data.frame()`.

```{r}
df <- data.frame(
  x = 1:3,
  y = c("a", "b", "c"),
  stringsAsFactors = FALSE # Par défaut dans R > 4.0
)
str(df)
```

## `data.frame`

Par défaut, un `data.frame` requiert des noms de colonnes syntaxiquement correct.

```{r}
names(data.frame(`1` = 1))
names(data.frame(`1` = 1, check.names = FALSE))
```

## `data.frame`

Un `data.frame` requiert que ces éléments soit de même longueur, quand cela n'est pas respecté et lorsque c'est possible, les valeurs des vecteurs les plus courts sont recyclés.

```{r}
data.frame(x = 1:4, y = 1:2)
data.frame(x = 1:4, y = 1:3)
```

## `data.frame`

Les `data.frame` ayant des noms de lignes, il est possible de les définir de plusieurs façons.

```{r}
df3 <- data.frame(
  age = c(35, 27, 18),
  hair = c("blond", "brown", "black"),
  row.names = c("Bob", "Susan", "Sam")
)
df3
```

## `data.frame`

Les `data.frame` ayant des noms de lignes, il est possible de les définir de plusieurs façons.

```{r}
df3 <- data.frame(
  age = c(35, 27, 18),
  hair = c("blond", "brown", "black")
)
rownames(df3) <- c("Bob", "Susan", "Sam")
df3
```

## `data.frame`

L'usage des noms de lignes n'est pas recommandé.

- Le nom des lignes est une donnée, pourquoi la stocker différemment&nbsp;?

- Le nom des lignes doit obligatoirement être une chaîne de caractères.

- Chaque nom de ligne doit-être unique.  
  {{< iconify fa6-brands r-project >}} s'assurera que ce soit le cas&nbsp;!

  ```{r}
  df3[c(1, 1, 1), ]
  ```

## Test et Conversion de Type

`is.data.frame()` permet de tester si l'objet est un `data.frame()` quand `as.data.frame()` permet la conversion.

```{r}
is.data.frame(df1)
```

## Exercises

1. Est-il possible d'avoir un `data.frame` avec zéro lignes&nbsp;?  
   Et zéro colonnes&nbsp;?

2. Que se passe-t-il lorsque des noms lignes avec duplicatas sont définis via `rownames()`&nbsp;?

3. Que donne `t(df)` ou `t(t(df))`&nbsp;?  
   Avec, `df` un objet de classe `data.frame`.

4. Que fait `as.matrix()` sur un `data.frame` dont les colonnes sont de type différents&nbsp;?
